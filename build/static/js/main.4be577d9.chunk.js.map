{"version":3,"sources":["services/utils.js","App.js","serviceWorker.js","index.js"],"names":["domain","addBoardRestriction","restriction","a","filteredRestriction","filterRestriction","console","log","axios","post","newRestriction","data","getExistingBoardRestrictions","accountId","get","existing","editRestriction","account","put","edited","deleteRestriction","_id","delete","deleted","boardId","Number","board","value","columnIds","columns","map","rest","groupId","group","RestrictionCreator","lazy","ExistingRestrictions","NavBar","Footer","monday","mondaySdk","App","useState","boards","setBoards","length","slug","setAccount","currentNav","setCurrentNav","existingRestrictions","setExistingRestrictions","useEffect","window","location","hash","includes","getBoards","table","href","NODE_ENV","process","getRestrictions","addNewRestriction","col","_newRestriction","utils","getRestrictionLabels","labeledRestriction","getBoardColumnsAndGroups","query","api","res","groups","filteredColumns","filter","title","type","id","label","mappedGroups","rests","Promise","all","fullRests","restrictions","labeled","JSON","stringify","boardName","name","push","_boards","boardsForDropdown","useMemo","validateNewRestriction","isNew","isExists","checkExistence","Swal","fire","html","icon","returnFocus","allowEnterKey","allowEscapeKey","text","find","fallback","className","path","element","setRestrictions","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iVAEMA,EAEA,yCAEC,SAAeC,EAAtB,kC,4CAAO,WAAmCC,GAAnC,iBAAAC,EAAA,6DACCC,EAAsBC,EAAkBH,GAC9CI,QAAQC,IAAR,6CAEEH,GAJG,SAMwBI,IAAMC,KAAN,UACxBT,EADwB,sBAE3BI,GARG,cAMCM,EAND,yBAUEA,EAAeC,MAVjB,4C,sBAYA,SAAeC,EAAtB,kC,4CAAO,WAA4CC,GAA5C,eAAAV,EAAA,sEACkBK,IAAMM,IAAN,UAClBd,EADkB,gCACYa,IAF9B,cACCE,EADD,yBAIEA,EAASJ,MAJX,4C,sBAMA,SAAeK,EAAtB,oC,4CAAO,WAA+Bd,EAAae,GAA5C,iBAAAd,EAAA,6DACLD,EAAYe,QAAUA,EAChBb,EAAsBC,EAAkBH,GAC9CI,QAAQC,IAAR,yCAAsDH,GACtDE,QAAQC,IAAR,iCAA8CL,GAJzC,SAKgBM,IAAMU,IAAN,UAChBlB,EADgB,sBAEnBI,GAPG,cAKCe,EALD,OASLb,QAAQC,IAAR,4BAAyCY,GATpC,kBAUEA,GAVF,4C,sBAYA,SAAeC,EAAtB,kC,4CAAO,WAAiClB,GAAjC,iBAAAC,EAAA,6DACGkB,EAAQnB,EAARmB,IADH,SAEiBb,IAAMc,OAAN,UAAgBtB,EAAhB,8BAA4CqB,IAF7D,cAECE,EAFD,OAGLjB,QAAQC,IAAR,+BAA4CgB,GAHvC,kBAIEA,GAJF,4C,sBAMP,SAASlB,EAAkBH,GACzB,IAAME,EAAsB,CAC1BS,UAAWX,EAAYW,WAAaX,EAAYe,QAChDO,QAASC,OAAOvB,EAAYwB,MAAMC,OAClCC,UAAW1B,EAAY2B,QAAQC,KAAI,SAACC,GAAD,OAAUA,EAAKJ,SAClDK,QAAS9B,EAAY+B,MAAMN,MAC3BN,IAAKnB,EAAYmB,KAMnB,OADAf,QAAQC,IAAR,2CAAwDH,GACjDA,I,kTC9CH8B,EAAqBC,gBAAK,kBAAM,uDAChCC,EAAuBD,gBAAK,kBAAM,uDAClCE,EAASF,gBAAK,kBAAM,iCACpBG,EAASH,gBAAK,kBAAM,iCAEpBI,EAASC,MAEA,SAASC,IAAO,IAAD,EACAC,mBAAS,IADT,mBACrBC,EADqB,KACbC,EADa,KAE5BtC,QAAQC,IAAR,gBAA6BoC,EAAOE,QAFR,MAGEH,mBAAS,CAAE7B,UAAW,KAAMiC,KAAM,OAHpC,mBAGrB7B,EAHqB,KAGZ8B,EAHY,OAIQL,mBAAS,IAJjB,mBAIrBM,EAJqB,KAITC,EAJS,OAK4BP,mBAAS,IALrC,mBAKrBQ,EALqB,KAKCC,EALD,KAM5BC,qBAAU,WACRH,EACEI,OAAOC,SAASC,KAAKC,SAAS,UAAY,SAAW,YAEvDC,IACAnD,QAAQoD,MAAM,CACZC,KAAMN,OAAOC,SAASK,KACtBC,SAAUC,eAEZvD,QAAQC,IAAI,gFACX,IACH6C,qBAAU,WACRnC,EAAQJ,WAAaiD,MACpB,CAAC7C,IAWJ,IAAM8C,EAAiB,uCAAG,WAAOrD,GAAP,iBAAAP,EAAA,6DACxBG,QAAQC,IAAR,sCAAmDG,GACjCA,EAAemB,QAAQC,KAAI,SAACkC,GAAD,cAASA,QAAT,IAASA,OAAT,EAASA,EAAKrC,SACrDsC,EAHkB,aAItBpD,UAAWI,EAAQJ,WAEhBH,GANmB,SAQDwD,IAA0BD,GARzB,8BASSE,EAAqB,CAACzD,IAT/B,OASlB0D,EATkB,OAUxB9D,QAAQC,IAAR,0CAAuD6D,GACvDjB,EAAwB,GAAD,mBAAKD,GAAL,YAA8BkB,KAX7B,4CAAH,sDAcjBC,EAAwB,uCAAG,WAAOnE,GAAP,6BAAAC,EAAA,4EAErBuB,EAAUxB,EAAVwB,aAFqB,IAGzBA,OAHyB,EAGzBA,EAAOC,OAHkB,wBAIrB2C,EAJqB,uCAKZ5C,EAAMC,MALM,kNAiBTY,EAAOgC,IAAID,GAjBF,cAiBrBE,EAjBqB,SAkBCA,EAAI7D,KAAKgC,OAAO,GAApCd,EAlBmB,EAkBnBA,QAAS4C,EAlBU,EAkBVA,OACjBnE,QAAQC,IAAR,8CAEEsB,EACA4C,GAEIC,EAAkB7C,EACrB8C,QACC,SAACX,GAAD,MACgB,SAAdA,EAAIY,QACH,CACC,gBACA,SACA,UACA,kBACA,UACApB,SAASQ,EAAIa,SAElB/C,KAAI,SAACkC,GACJ,MAAO,CAAErC,MAAOqC,EAAIc,GAAIC,MAAOf,EAAIY,UAEjCI,EAvCqB,OAuCNP,QAvCM,IAuCNA,OAvCM,EAuCNA,EAAQ3C,KAAI,SAACG,GAChC,MAAO,CAAEN,MAAOM,EAAM6C,GAAIC,MAAO9C,EAAM2C,UAxCd,kBA0CpB,CAAE/C,QAAS6C,EAAiBD,OAAQO,IA1ChB,0DA8C7B1E,QAAQC,IAAR,wCA9C6B,0DAAH,sDAiDxBuD,EAAe,uCAAG,8BAAA3D,EAAA,sEACJ+D,IAAmCjD,EAAQJ,WADvC,cAClBoE,EADkB,gBAERC,QAAQC,IAAIF,GAFJ,cAEtBA,EAFsB,gBAGEd,EAAqBc,GAHvB,OAGhBG,EAHgB,OAItBjC,EAAwBiC,GAJF,4CAAH,qDAMfjB,EAAoB,uCAAG,WAAOkB,GAAP,uCAAAlF,EAAA,sDAC3BG,QAAQC,IAAR,uCAAoD8E,GADzB,SAGnBC,EAAU,GAHS,cAIDD,GAJC,gEAIhBnF,EAJgB,QAKjB8B,GAAqB,OAAX9B,QAAW,IAAXA,GAAA,UAAAA,EAAa+B,aAAb,eAAoBN,SAApB,OAA6BzB,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAa8B,SACpDJ,GACO,OAAX1B,QAAW,IAAXA,GAAA,UAAAA,EAAa2B,eAAb,eAAsBC,KAAI,SAACkC,GAAD,OAASA,EAAIc,IAAMd,EAAIrC,YAAjD,OACAzB,QADA,IACAA,OADA,EACAA,EAAa0B,WACT0C,EATiB,wCAURpE,EAAYsB,SAAWtB,EAAYwB,MAAMC,MAVjC,yDAYL4D,KAAKC,UAAUxD,GAZV,8FAgBLuD,KAAKC,UAAU5D,GAhBV,oFAsBvBtB,QAAQC,IAAR,gCAA6C+D,GAtBtB,UAuBL/B,EAAOgC,IAAID,GAvBN,QAuBjBE,EAvBiB,OAwBvBlE,QAAQC,IAAR,8BAA2CiE,EAAI7D,KAAKgC,OAAO,IACrD8C,EAAYjB,EAAI7D,KAAKgC,OAAO,GAAG+C,KAC/BzD,EAAQ,CACZ8C,MAAOP,EAAI7D,KAAKgC,OAAO,GAAG8B,OAAO,GAAGG,MACpCjD,MAAOzB,EAAY8B,SAEfH,EAAU2C,EAAI7D,KAAKgC,OAAO,GAAGd,QAAQC,KAAI,SAACkC,GAC9C,MAAO,CAAErC,MAAOqC,EAAIc,GAAIC,MAAOf,EAAIY,UAErCU,EAAQK,KAAK,CACXjE,MAAO,CACLC,MAAOF,OAAOvB,EAAYsB,SAC1BuD,MAAOU,GAET5D,UACAI,QACAZ,IAAKnB,EAAYmB,MAxCI,wKA2ClBiE,GA3CkB,kCA6CzBhF,QAAQC,IAAR,sCA7CyB,uEAAH,sDAiDpBkD,EAAS,uCAAG,8BAAAtD,EAAA,sMAWEoC,EAAOgC,IAXT,yIAWVC,EAXU,OAYhBzB,EAAW,CACTlC,UAAWY,OAAO+C,EAAI7D,KAAKM,QAAQ6D,IACnChC,KAAM0B,EAAI7D,KAAKM,QAAQ6B,OAGnB8C,EAAUpB,EAAI7D,KAAKgC,OACzBC,EAAUgD,GAlBM,2CAAH,qDAqBTC,EAAoBC,mBAAQ,WAChC,UAAInD,QAAJ,IAAIA,OAAJ,EAAIA,EAAQE,OACV,OAAOF,EAAOb,KAAI,SAACJ,GACjB,MAAO,CAAEqD,MAAOrD,EAAMgE,KAAM/D,MAAOD,EAAMoD,SAG5C,CAACnC,IACEoD,EAAyB,SAAC7F,EAAa8F,GAC3C1F,QAAQC,IAAR,kCAA+CyF,GAC/C1F,QAAQC,IAAR,wCAAqDL,GAFA,IAG7CwB,EAAiBxB,EAAjBwB,MAAOO,EAAU/B,EAAV+B,MACPJ,EAAY3B,EAAZ2B,QACR,GACEH,EAAMqD,OACNrD,EAAMC,OACNM,EAAM8C,OACN9C,EAAMN,OACNE,EAAQgB,OACR,CACA,IAAMoD,EAAWC,EAAehG,IAAgB8F,EAEhD,OADA1F,QAAQC,IAAR,qCAAkD0F,IAC9CA,IACFE,IAAKC,KAAK,CACRxB,MAAO,2BACPyB,KAAK,qDAAD,OAAuDnG,EAAY+B,MAAM8C,MAAzE,4BAAkG7E,EAAYwB,MAAMqD,MAApH,kBACJuB,KAAM,QACNC,aAAa,EACbC,eAAe,EACfC,gBAAgB,KAEX,GAaT,OARAN,IAAKC,KAAK,CACRxB,MAAO,2BACP8B,KAAM,2BACNJ,KAAM,QACNC,aAAa,EACbC,eAAe,EACfC,gBAAgB,KAEX,GAGLP,EAAiB,SAAChG,GACtBI,QAAQC,IAAR,gCAA6CL,GAC7C,IAAMa,EAAWmC,EAAqByD,MACpC,SAAC5E,GAAD,OACEN,OAAOM,EAAKL,MAAMC,SAAWF,OAAOvB,EAAYwB,MAAMC,QACtDI,EAAKE,MAAMN,QAAUzB,EAAY+B,MAAMN,SAG3C,OADArB,QAAQC,IAAR,uBAAoCQ,KAC3BA,GAGX,OACE,kBAAC,WAAD,CACE6F,SACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,UACb,kBAAC,IAAD,SAKN,yBAAKA,UAAU,OACb,kBAAC,IAAD,KACE,kBAACxE,EAAD,CAAQW,WAAYA,EAAYC,cAAeA,IAC/C,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE6D,KAAK,UACLC,QACE,kBAAC7E,EAAD,CACE2D,kBAAmBA,EACnBlD,OAAQA,EACRJ,OAAQA,EACRwB,kBAAmBA,EACnBM,yBAA0BA,EAC1B0B,uBAAwBA,EACxBjD,KAAI,OAAE7B,QAAF,IAAEA,OAAF,EAAEA,EAAS6B,SAIrB,kBAAC,IAAD,CACEgE,KAAK,IACLC,QACE,kBAAC3E,EAAD,CACEyD,kBAAmBA,EACnBxB,yBAA0BA,EAC1BpD,QAAO,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAASJ,UAClBwE,aAAcnC,EACd8D,gBAAiB7D,EACjB4C,uBAAwBA,EACxBjC,gBAAiBA,EACjBvB,OAAQA,OAKhB,kBAACD,EAAD,SCjRU2E,QACW,cAA7B5D,OAAOC,SAAS4D,UAEe,UAA7B7D,OAAOC,SAAS4D,UAEhB7D,OAAOC,SAAS4D,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzH,QAAQyH,MAAMA,EAAMC,c","file":"static/js/main.4be577d9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst domain =\r\n  process.env.NODE_ENV !== \"development\"\r\n    ? \"https://histadrut-inters.herokuapp.com\"\r\n    : \"https://3c66-2a0e-9cc0-23f4-d00-e518-6302-6f4b-e999.eu.ngrok.io\";\r\nexport async function addBoardRestriction(restriction) {\r\n  const filteredRestriction = filterRestriction(restriction);\r\n  console.log(\r\n    `addBoardRestriction -> filteredRestriction`,\r\n    filteredRestriction\r\n  );\r\n  const newRestriction = await axios.post(\r\n    `${domain}/restriction/board`,\r\n    filteredRestriction\r\n  );\r\n  return newRestriction.data;\r\n}\r\nexport async function getExistingBoardRestrictions(accountId) {\r\n  const existing = await axios.get(\r\n    `${domain}/restriction/account/${accountId}`\r\n  );\r\n  return existing.data;\r\n}\r\nexport async function editRestriction(restriction, account) {\r\n  restriction.account = account;\r\n  const filteredRestriction = filterRestriction(restriction);\r\n  console.log(`editRestriction -> filteredRestriction`, filteredRestriction);\r\n  console.log(`editRestriction -> restriction`, restriction);\r\n  const edited = await axios.put(\r\n    `${domain}/restriction/board`,\r\n    filteredRestriction\r\n  );\r\n  console.log(`editRestriction -> edited`, edited);\r\n  return edited;\r\n}\r\nexport async function deleteRestriction(restriction) {\r\n  const { _id } = restriction;\r\n  const deleted = await axios.delete(`${domain}/restriction/board/${_id}`);\r\n  console.log(`deleteRestriction -> deleted`, deleted);\r\n  return deleted;\r\n}\r\nfunction filterRestriction(restriction) {\r\n  const filteredRestriction = {\r\n    accountId: restriction.accountId || restriction.account,\r\n    boardId: Number(restriction.board.value),\r\n    columnIds: restriction.columns.map((rest) => rest.value),\r\n    groupId: restriction.group.value,\r\n    _id: restriction._id,\r\n  };\r\n  // filteredRestriction.;\r\n  // filteredRestriction.;\r\n  // filteredRestriction.;\r\n  console.log(`filterRestriction -> filteredRestriction`, filteredRestriction);\r\n  return filteredRestriction;\r\n}\r\n","import React, { lazy, Suspense, useEffect, useMemo, useState } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\nimport Swal from \"sweetalert2\";\nimport Loader from \"monday-ui-react-core/dist/Loader\";\nimport * as utils from \"./services/utils\";\nimport { HashRouter, Route, Routes } from \"react-router-dom\";\nconst RestrictionCreator = lazy(() => import(\"./views/RestrictionCreator\"));\nconst ExistingRestrictions = lazy(() => import(\"./views/ExistingRestrictions\"));\nconst NavBar = lazy(() => import(\"./components/NavBar\"));\nconst Footer = lazy(() => import(\"./components/Footer\"));\n\nconst monday = mondaySdk();\n\nexport default function App() {\n  const [boards, setBoards] = useState([]);\n  console.log(`App -> boards`, boards.length);\n  const [account, setAccount] = useState({ accountId: null, slug: null });\n  const [currentNav, setCurrentNav] = useState(\"\");\n  const [existingRestrictions, setExistingRestrictions] = useState([]);\n  useEffect(() => {\n    setCurrentNav(\n      window.location.hash.includes(\"create\") ? \"create\" : \"existing\"\n    );\n    getBoards();\n    console.table({\n      href: window.location.href,\n      NODE_ENV: process.env.NODE_ENV,\n    });\n    console.log(\"אהוב את המלאכה\");\n  }, []);\n  useEffect(() => {\n    account.accountId && getRestrictions();\n  }, [account]);\n  // useEffect(() => {\n  //   const filteredBoards = boards?.filter(\n  //     (board) =>\n  //       !existingRestrictions.find(\n  //         (restriction) =>\n  //           Number(restriction?.board?.value) === Number(board?.id)\n  //       )\n  //   );\n  //   setBoards(filteredBoards);\n  // }, [existingRestrictions]);\n  const addNewRestriction = async (newRestriction) => {\n    console.log(`addNewRestriction -> newRestriction`, newRestriction);\n    const columnIds = newRestriction.columns.map((col) => col?.value);\n    const _newRestriction = {\n      accountId: account.accountId,\n\n      ...newRestriction,\n    };\n    const _newRest = await utils.addBoardRestriction(_newRestriction);\n    const labeledRestriction = await getRestrictionLabels([newRestriction]);\n    console.log(`addNewRestriction -> labeledRestriction`, labeledRestriction);\n    setExistingRestrictions([...existingRestrictions, ...labeledRestriction]);\n  };\n\n  const getBoardColumnsAndGroups = async (restriction) => {\n    try {\n      const { board } = restriction;\n      if (board?.value) {\n        const query = `query{\n          boards(ids:${board.value}){\n            groups{\n              id\n              title\n            }\n            columns{\n              id\n              type\n              title\n            }\n          }\n        }`;\n        const res = await monday.api(query);\n        const { columns, groups } = res.data.boards[0];\n        console.log(\n          `getBoardColumnsAndGroups -> columns, groups`,\n          columns,\n          groups\n        );\n        const filteredColumns = columns\n          .filter(\n            (col) =>\n              col.title !== \"Name\" &&\n              ![\n                \"pulse-updated\",\n                \"lookup\",\n                \"formula\",\n                \"columns-battery\",\n                \"button\",\n              ].includes(col.type)\n          )\n          .map((col) => {\n            return { value: col.id, label: col.title };\n          });\n        const mappedGroups = groups?.map((group) => {\n          return { value: group.id, label: group.title };\n        });\n        return { columns: filteredColumns, groups: mappedGroups };\n      } else {\n      }\n    } catch (err) {\n      console.log(`getBoardColumnsAndGroups -> err`, err);\n    }\n  };\n  const getRestrictions = async () => {\n    let rests = await utils.getExistingBoardRestrictions(account.accountId);\n    rests = await Promise.all(rests);\n    const fullRests = await getRestrictionLabels(rests);\n    setExistingRestrictions(fullRests);\n  };\n  const getRestrictionLabels = async (restrictions) => {\n    console.log(`getRestrictionLabels -> restrictions`, restrictions);\n    try {\n      const labeled = [];\n      for (let restriction of restrictions) {\n        const groupId = restriction?.group?.value || restriction?.groupId;\n        const columnIds =\n          restriction?.columns?.map((col) => col.id || col.value) ||\n          restriction?.columnIds;\n        const query = `query{ \n          boards(ids:${restriction.boardId || restriction.board.value}){\n            name\n            groups(ids:[${JSON.stringify(groupId)}]){\n              title\n              id\n            }\n            columns(ids:${JSON.stringify(columnIds)}){\n              id\n              title\n            }\n          }\n        }`;\n        console.log(`getRestrictionLabels -> query`, query);\n        const res = await monday.api(query);\n        console.log(`getRestrictionLabels -> res`, res.data.boards[0]);\n        const boardName = res.data.boards[0].name;\n        const group = {\n          label: res.data.boards[0].groups[0].title,\n          value: restriction.groupId,\n        };\n        const columns = res.data.boards[0].columns.map((col) => {\n          return { value: col.id, label: col.title };\n        });\n        labeled.push({\n          board: {\n            value: Number(restriction.boardId),\n            label: boardName,\n          },\n          columns,\n          group,\n          _id: restriction._id,\n        });\n      }\n      return labeled;\n    } catch (error) {\n      console.log(`getRestrictionLabels -> error`, error);\n    }\n  };\n\n  const getBoards = async () => {\n    const query = `query{\n      account{\n        id\n        slug\n      }\n      boards(limit:2000){\n        name\n        id\n      }\n    }`;\n    const res = await monday.api(query);\n    setAccount({\n      accountId: Number(res.data.account.id),\n      slug: res.data.account.slug,\n    });\n    // console.log(`getBoards -> res`, res.data);\n    const _boards = res.data.boards;\n    setBoards(_boards);\n  };\n\n  const boardsForDropdown = useMemo(() => {\n    if (boards?.length) {\n      return boards.map((board) => {\n        return { label: board.name, value: board.id };\n      });\n    }\n  }, [boards]);\n  const validateNewRestriction = (restriction, isNew) => {\n    console.log(`validateNewRestriction -> isNew`, isNew);\n    console.log(`validateNewRestriction -> restriction`, restriction);\n    const { board, group } = restriction;\n    const { columns } = restriction;\n    if (\n      board.label &&\n      board.value &&\n      group.label &&\n      group.value &&\n      columns.length\n    ) {\n      const isExists = checkExistence(restriction) && isNew; // if it's an existing restriction dont check for existence\n      console.log(`validateNewRestriction -> isExists`, isExists);\n      if (isExists) {\n        Swal.fire({\n          title: \"Couldn't add restriction\",\n          html: `<p>You already have an existing restriction on <b>${restriction.group.label}</b> group in <b>${restriction.board.label}</b> board</p>`,\n          icon: \"error\",\n          returnFocus: true,\n          allowEnterKey: true,\n          allowEscapeKey: true,\n        });\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      Swal.fire({\n        title: \"Couldn't add restriction\",\n        text: \"some columns are missing\",\n        icon: \"error\",\n        returnFocus: true,\n        allowEnterKey: true,\n        allowEscapeKey: true,\n      });\n      return false;\n    }\n  };\n  const checkExistence = (restriction) => {\n    console.log(`checkExistence -> restriction`, restriction);\n    const existing = existingRestrictions.find(\n      (rest) =>\n        Number(rest.board.value) === Number(restriction.board.value) &&\n        rest.group.value === restriction.group.value\n    );\n    console.log(`existing -> existing`, existing);\n    return !!existing;\n  };\n\n  return (\n    <Suspense\n      fallback={\n        <div className=\"loader-div\">\n          <div className=\"loader\">\n            <Loader />\n          </div>\n        </div>\n      }\n    >\n      <div className=\"App\">\n        <HashRouter>\n          <NavBar currentNav={currentNav} setCurrentNav={setCurrentNav} />\n          <Routes>\n            <Route\n              path=\"/create\"\n              element={\n                <RestrictionCreator\n                  boardsForDropdown={boardsForDropdown}\n                  boards={boards}\n                  monday={monday}\n                  addNewRestriction={addNewRestriction}\n                  getBoardColumnsAndGroups={getBoardColumnsAndGroups}\n                  validateNewRestriction={validateNewRestriction}\n                  slug={account?.slug}\n                />\n              }\n            />\n            <Route\n              path=\"/\"\n              element={\n                <ExistingRestrictions\n                  boardsForDropdown={boardsForDropdown}\n                  getBoardColumnsAndGroups={getBoardColumnsAndGroups}\n                  account={account?.accountId}\n                  restrictions={existingRestrictions}\n                  setRestrictions={setExistingRestrictions}\n                  validateNewRestriction={validateNewRestriction}\n                  getRestrictions={getRestrictions}\n                  monday={monday}\n                />\n              }\n            />\n          </Routes>\n          <Footer />\n        </HashRouter>\n      </div>\n    </Suspense>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}