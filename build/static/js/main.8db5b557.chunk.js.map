{"version":3,"sources":["services/utils.js","App.js","serviceWorker.js","index.js"],"names":["domain","addBoardRestriction","restriction","a","filteredRestriction","filterRestriction","console","log","axios","post","newRestriction","data","getExistingBoardRestrictions","accountId","get","existing","editRestriction","account","put","edited","deleteRestriction","_id","delete","deleted","boardId","Number","board","value","columnIds","columns","map","rest","RestrictionCreator","lazy","ExistingRestrictions","NavBar","Footer","monday","mondaySdk","App","useState","boards","setBoards","setAccount","currentNav","setCurrentNav","existingRestrictions","setExistingRestrictions","useEffect","window","location","hash","includes","getBoards","getRestrictions","filteredBoards","filter","find","id","addNewRestriction","col","_newRestriction","utils","getRestrictionLabels","labeledRestriction","getBoardColumns","query","api","res","filteredColumns","title","label","rests","Promise","all","fullRests","restrictions","labeled","JSON","stringify","boardName","name","push","_boards","boardsForDropdown","useMemo","length","validateNewRestriction","Swal","fire","text","icon","returnFocus","allowEnterKey","allowEscapeKey","fallback","className","path","element","setRestrictions","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8db5b557.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst domain =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"https://histadrut-inters.herokuapp.com\"\r\n    : \"https://d4eb-2a0e-9cc0-23f4-d00-fce6-3347-eae8-4c60.eu.ngrok.io\";\r\nexport async function addBoardRestriction(restriction) {\r\n  const filteredRestriction = filterRestriction(restriction);\r\n  console.log(\r\n    `addBoardRestriction -> filteredRestriction`,\r\n    filteredRestriction\r\n  );\r\n  const newRestriction = await axios.post(\r\n    `${domain}/restriction/board`,\r\n    filteredRestriction\r\n  );\r\n  return newRestriction.data;\r\n}\r\nexport async function getExistingBoardRestrictions(accountId) {\r\n  const existing = await axios.get(\r\n    `${domain}/restriction/account/${accountId}`\r\n  );\r\n  return existing.data;\r\n}\r\nexport async function editRestriction(restriction, account) {\r\n  restriction.account = account;\r\n  const filteredRestriction = filterRestriction(restriction);\r\n  console.log(`editRestriction -> filteredRestriction`, filteredRestriction);\r\n  console.log(`editRestriction -> restriction`, restriction);\r\n  const edited = await axios.put(\r\n    `${domain}/restriction/board`,\r\n    filteredRestriction\r\n  );\r\n  console.log(`editRestriction -> edited`, edited);\r\n  return edited;\r\n}\r\nexport async function deleteRestriction(restriction) {\r\n  const { _id } = restriction;\r\n  const deleted = await axios.delete(`${domain}/restriction/board/${_id}`);\r\n  console.log(`deleteRestriction -> deleted`, deleted);\r\n  return deleted;\r\n}\r\nfunction filterRestriction(restriction) {\r\n  const filteredRestriction = {\r\n    accountId: restriction.accountId || restriction.account,\r\n    boardId: Number(restriction.board.value),\r\n    columnIds: restriction.columns.map((rest) => rest.value),\r\n    _id: restriction._id,\r\n  };\r\n  // filteredRestriction.;\r\n  // filteredRestriction.;\r\n  // filteredRestriction.;\r\n  console.log(`filterRestriction -> filteredRestriction`, filteredRestriction);\r\n  return filteredRestriction;\r\n}\r\n","import React, { lazy, Suspense, useEffect, useMemo, useState } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\nimport Swal from \"sweetalert2\";\nimport Loader from \"monday-ui-react-core/dist/Loader\";\nimport * as utils from \"./services/utils\";\nimport { HashRouter, Route, Routes } from \"react-router-dom\";\nconst RestrictionCreator = lazy(() => import(\"./views/RestrictionCreator\"));\nconst ExistingRestrictions = lazy(() => import(\"./views/ExistingRestrictions\"));\nconst NavBar = lazy(() => import(\"./components/NavBar\"));\nconst Footer = lazy(() => import(\"./components/Footer\"));\n\nconst monday = mondaySdk();\n\nexport default function App() {\n  const [boards, setBoards] = useState([]);\n  const [account, setAccount] = useState();\n  const [currentNav, setCurrentNav] = useState(\"\");\n  const [existingRestrictions, setExistingRestrictions] = useState([]);\n  useEffect(() => {\n    setCurrentNav(\n      window.location.hash.includes(\"create\") ? \"create\" : \"existing\"\n    );\n    getBoards();\n    console.log(\"אהוב את המלאכה\");\n  }, []);\n  useEffect(() => {\n    account && getRestrictions();\n  }, [account]);\n  useEffect(() => {\n    const filteredBoards = boards?.filter(\n      (board) =>\n        !existingRestrictions.find(\n          (restriction) =>\n            Number(restriction?.board?.value) === Number(board?.id)\n        )\n    );\n    setBoards(filteredBoards);\n  }, [existingRestrictions]);\n  const addNewRestriction = async (newRestriction) => {\n    const columnIds = newRestriction.columns.map((col) => col?.value);\n    const _newRestriction = {\n      accountId: account,\n      ...newRestriction,\n    };\n    const _newRest = await utils.addBoardRestriction(_newRestriction);\n    const labeledRestriction = await getRestrictionLabels(newRestriction);\n    setExistingRestrictions([...existingRestrictions, labeledRestriction]);\n  };\n\n  const getBoardColumns = async (restriction) => {\n    try {\n      const { board } = restriction;\n      if (board?.value) {\n        const query = `query{\n          boards(ids:${board.value}){\n            columns{\n              id\n              type\n              title\n            }\n          }\n        }`;\n        const res = await monday.api(query);\n        const { columns } = res.data.boards[0];\n        const filteredColumns = columns\n          .filter((col) => col.title !== \"Name\")\n          .map((col) => {\n            return { value: col.id, label: col.title };\n          });\n\n        return filteredColumns;\n      } else {\n      }\n    } catch (err) {\n      console.log(`getBoardColumns -> err`, err);\n    }\n  };\n  const getRestrictions = async () => {\n    let rests = await utils.getExistingBoardRestrictions(account);\n    rests = await Promise.all(rests);\n    const fullRests = await getRestrictionLabels(rests);\n    setExistingRestrictions(fullRests);\n  };\n  const getRestrictionLabels = async (restrictions) => {\n    try {\n      const labeled = [];\n      for (let restriction of restrictions) {\n        const query = `query{\n          boards(ids:${restriction.boardId || restriction.board.value}){\n            name\n            columns(ids:${JSON.stringify(restriction.columnIds)}){\n              id\n              title\n            }\n          }\n        }`;\n        const res = await monday.api(query);\n        console.log(`getRestrictionLabels -> res`, res);\n        const boardName = res.data.boards[0].name;\n\n        const columns = res.data.boards[0].columns.map((col) => {\n          return { value: col.id, label: col.title };\n        });\n        labeled.push({\n          board: {\n            value: Number(restriction.boardId),\n            label: boardName,\n          },\n          columns,\n          _id: restriction._id,\n        });\n        // });\n      }\n      // await Promise.all(labeled);\n      return labeled;\n    } catch (error) {\n      console.log(`getRestrictionLabels -> error`, error);\n    }\n  };\n\n  const getBoards = async () => {\n    const query = `query{\n      account{\n        id\n      }\n      boards{\n        name\n        id\n      }\n    }`;\n    const res = await monday.api(query);\n    setAccount(Number(res.data.account.id));\n    // console.log(`getBoards -> res`, res.data);\n    const _boards = res.data.boards;\n    setBoards(_boards);\n  };\n\n  const boardsForDropdown = useMemo(() => {\n    if (boards?.length) {\n      return boards.map((board) => {\n        return { label: board.name, value: board.id };\n      });\n    }\n  }, [boards]);\n  const validateNewRestriction = (restriction) => {\n    console.log(`validateNewRestriction -> restriction`, restriction);\n    const { label, value } = restriction?.board;\n    const { columns } = restriction;\n    if (label && value && columns.length) {\n      return true;\n    } else {\n      Swal.fire({\n        title: \"Couldn't add restriction\",\n        text: \"some columns are missing\",\n        icon: \"warning\",\n        returnFocus: true,\n        allowEnterKey: true,\n        allowEscapeKey: true,\n      });\n      return false;\n    }\n  };\n\n  return (\n    <Suspense\n      fallback={\n        <div className=\"loader-div\">\n          <div className=\"loader\">\n            <Loader />\n          </div>\n        </div>\n      }\n    >\n      <div className=\"App\">\n        <HashRouter>\n          <NavBar currentNav={currentNav} setCurrentNav={setCurrentNav} />\n          <Routes>\n            <Route\n              path=\"/create\"\n              element={\n                <RestrictionCreator\n                  boardsForDropdown={boardsForDropdown}\n                  boards={boards}\n                  monday={monday}\n                  addNewRestriction={addNewRestriction}\n                  getBoardColumns={getBoardColumns}\n                  validateNewRestriction={validateNewRestriction}\n                />\n              }\n            />\n            <Route\n              path=\"/\"\n              element={\n                <ExistingRestrictions\n                  boardsForDropdown={boardsForDropdown}\n                  getBoardColumns={getBoardColumns}\n                  getRestrictionLabels={getRestrictionLabels}\n                  account={account}\n                  restrictions={existingRestrictions}\n                  setRestrictions={setExistingRestrictions}\n                  validateNewRestriction={validateNewRestriction}\n                  getRestrictions={getRestrictions}\n                />\n              }\n            />\n          </Routes>\n          <Footer />\n        </HashRouter>\n      </div>\n    </Suspense>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}